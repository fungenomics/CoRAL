
#----------------------------------------------------
#  Setup
#----------------------------------------------------

# import libraries
import os
from datetime import datetime

# Get the names of query samples from the paths given in the query section of the config
samples = [os.path.basename(os.path.dirname(query_path)) for query_path in config['query_datasets']]

now = datetime.now()
dt_string = now.strftime("%Y-%m-%d_%H-%M-%S")

#----------------------------------------------------
#  Final rule all 
#----------------------------------------------------

rule all:
  input:
    expand(config["output_dir"] + "/{sample}/Prediction_Summary.tsv", 
           sample  = samples),
    expand(config['output_dir'] + '/{sample}/report/{sample}.prediction_report.' + dt_string + '.html',
           sample = samples)


#----------------------------------------------------
#  Preprocess
#----------------------------------------------------

rule preprocess:
  input:
    reference = config['training_reference'],
    query = config['query_datasets']
  output:
    reference = config['output_dir'] + "/expression.csv",
    query = expand(config['output_dir'] + "/{sample}/expression.csv", sample = samples)
  params:
    basedir = {workflow.basedir},
    out_path = config['output_dir'],
    convert_genes = config['convert_ref_mm_to_hg']
  log: config['output_dir'] + "/preprocess.log"
  priority: 50
  shell:
    """
    Rscript {params.basedir}/Scripts/preprocess.R \
    {input.reference} \
    "{input.query}" \
    {params.out_path} \
    {params.convert_genes} \
    &> {log} 
    """

#----------------------------------------------------
#  Consensus 
#----------------------------------------------------

rule consensus:
  input:
    results = expand(config["output_dir"] + "/{{sample}}/{tool}/{tool}_pred.csv",
                     tool=config['tools_to_run']),
    sample = config["output_dir"] + "/{sample}"
  output:
    prediction_summary = config["output_dir"] + "/{sample}/Prediction_Summary.tsv"
  log: 
    config["output_dir"] + "/{sample}/Gatherpreds.log"
  params:
    basedir = {workflow.basedir}, 
    tools = config['tools_to_run'],
    consensus_tools = config['consensus_tools'],
    labfile = config['reference_annotations']
  shell:
    """
    Rscript {params.basedir}/Scripts/calculate_consensus.R \
    {input.sample} \
    {output.prediction_summary} \
    "{params.tools}" \
    "{params.consensus_tools}" \
    {params.labfile} \
    &> {log}
    """  

#----------------------------------------------------
#  Knit Report 
#----------------------------------------------------

rule knit_report:
  input: 
    pred = config['output_dir'] + "/{sample}/Prediction_Summary.tsv"
  output: 
    report_path = config['output_dir'] + '/{sample}/report/{sample}.prediction_report.' + dt_string + '.html'
  log:
    config['output_dir'] + "/{sample}/report/report.log"
  params:
    basedir = {workflow.basedir},
    pred_path = config['output_dir'], 
    sample = "{sample}",
    tools = config['tools_to_run'], 
    consensus = config['consensus_tools'],
    refs = config['references'],
    ref_anno = config['reference_annotations'],
    marker_genes = config['marker_genes']
  threads: 1
  resources:
  shell:
    """
    Rscript -e "rmarkdown::render(
            '{params.basedir}/Notebooks/annotate_report.Rmd',
            params = list(tools         = '{params.tools}',
                          consensus     = '{params.consensus}',
                          refs          = '{params.refs}',
                          ref_anno      = '{params.ref_anno}',
                          pred_path     = '{params.pred_path}',
                          sample        = '{params.sample}',
                          marker_genes  = '{params.marker_genes}',
                          threads       = '{threads}'),
            output_file = '{output.report_path}')" \
    &> {log}
    """

#----------------------------------------------------
#   SingleR 
#----------------------------------------------------

rule train_SingleR:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/SingleR/SingleR_model.Rda"
  params:
      basedir = {workflow.basedir}
  log: 
    config['output_dir'] + "/SingleR/SingleR.log"
  benchmark:
    config['output_dir'] + "/SingleR/SingleR_train_benchmark.txt"
  threads: 1
  resources: 
  shell:
    """
    Rscript {params.basedir}/Scripts/SingleR/train_SingleR.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_SingleR:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/SingleR/SingleR_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/SingleR/SingleR_pred.csv"
  params:
      basedir = {workflow.basedir}
  log: 
    config['output_dir'] + "/{sample}/SingleR/SingleR.log"
  benchmark:
    config['output_dir'] + "/{sample}/SingleR/SingleR_predict_benchmark.txt"
  threads: 1
  resources: 
  shell:
    """
    Rscript {params.basedir}/Scripts/SingleR/predict_SingleR.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scPred 
#----------------------------------------------------

rule train_scPred:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/scPred/scPred_model.Rda"
  params:
    basedir = {workflow.basedir},
    model_type = "svmRadial",
  log: 
    config['output_dir'] + "/scPred/scPred.log"
  benchmark:
    config['output_dir'] + "/scPred/scPred_train_benchmark.txt"
  threads: 1
  resources: 
  shell:
    """
    Rscript {params.basedir}/Scripts/scPred/train_scPred.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    {params.model_type} \
    &> {log}
    """

rule predict_scPred:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/scPred/scPred_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/scPred/scPred_pred.csv"
  params:
      basedir = {workflow.basedir}
  log: 
    config['output_dir'] + "/{sample}/scPred/scPred.log"
  benchmark:
    config['output_dir'] + "/{sample}/scPred/scPred_predict_benchmark.txt"
  threads: 1
  resources: 
  shell:
    """
    Rscript {params.basedir}/Scripts/scPred/predict_scPred.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """
#----------------------------------------------------
#   scClassify
#----------------------------------------------------

rule train_scClassify:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/scClassify/scClassify_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/scClassify/scClassify.log"
  benchmark:
    config['output_dir'] + "/scClassify/scClassify_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scClassify/train_scClassify.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_scClassify:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/scClassify/scClassify_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/scClassify/scClassify_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/scClassify/scClassify.log"
  benchmark:
    config['output_dir'] + "/{sample}/scClassify/scClassify_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scClassify/predict_scClassify.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   SciBet
#----------------------------------------------------

rule train_SciBet:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/SciBet/SciBet_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/SciBet/SciBet.log"
  benchmark:
    config['output_dir'] + "/SciBet/SciBet_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/SciBet/train_SciBet.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_SciBet:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/SciBet/SciBet_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/SciBet/SciBet_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/SciBet/SciBet.log"
  benchmark:
    config['output_dir'] + "/{sample}/SciBet/SciBet_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/SciBet/predict_SciBet.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scHPL
#----------------------------------------------------

rule train_scHPL:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/scHPL/scHPL_model.pkl"
  params:
    basedir = {workflow.basedir},
    classifier = 'svm',
    dimred = 'False'
  log:
    config['output_dir'] + "/scHPL/scHPL.log"
  benchmark:
    config['output_dir'] + "/scHPL/scHPL_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/scHPL/train_scHPL.py \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {params.classifier} \
    {params.dimred} \
    &> {log}
    """

rule predict_scHPL:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/scHPL/scHPL_model.pkl"
  output:
    pred = config['output_dir'] + "/{sample}/scHPL/scHPL_pred.csv"
  params:
      basedir = {workflow.basedir},
      threshold = 0.5
  log:
    config['output_dir'] + "/{sample}/scHPL/scHPL.log"
  benchmark:
    config['output_dir'] + "/{sample}/scHPL/scHPL_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/scHPL/predict_scHPL.py \
    {input.query} \
    {input.model} \
    {output.pred} \
    {params.threshold} \
    &> {log}
    """

#----------------------------------------------------
#   SVM Linear
#----------------------------------------------------

rule train_SVMlinear:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/SVMlinear/SVMlinear_model.pkl"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/SVMlinear/SVMlinear.log"
  benchmark:
    config['output_dir'] + "/SVMlinear/SVMlinear_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/train_linearSVM.py \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_SVMlinear:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/SVMlinear/SVMlinear_model.pkl"
  output:
    pred = config['output_dir'] + "/{sample}/SVMlinear/SVMlinear_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0,
    tool_name = 'SVMlinear'
  log:
    config['output_dir'] + "/{sample}/SVMlinear/SVMlinear.log"
  benchmark:
    config['output_dir'] + "/{sample}/SVMlinear/SVMlinear_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/predict_SVM.py \
    {input.query} \
    {input.model} \
    {output.pred} \
    {params.threshold} \
    {threads} \
    {params.tool_name} \
    &> {log}
    """

#----------------------------------------------------
#   SVC 
#----------------------------------------------------

rule train_SVC:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/SVCrbf/SVCrbf_model.Rda"
  params:
    basedir = {workflow.basedir},
    classifier = 'rbf'
  log:
    config['output_dir'] + "/SVCrbf/SVCrbf.log"
  benchmark:
    config['output_dir'] + "/SVCrbf/SVCrbf_train_benchmark.txt"
  threads: 10
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/train_SVM.py \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {params.classifier} \
    {threads} \
    &> {log}
    """

rule predict_SVC:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/SVCrbf/SVCrbf_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/SVCrbf/SVCrbf_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0.5,
    tool_name = 'rbf'
  log:
    config['output_dir'] + "/{sample}/SVCrbf/SVCrbf.log"
  benchmark:
    config['output_dir'] + "/{sample}/SVCrbf/SVCrbf_predict_benchmark.txt"
  threads: 10
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/predict_SVM.py \
    {input.query} \
    {input.model} \
    {output.pred} \
    {params.threshold} \
    {threads} \
    {params.tool_name} \
    &> {log}
    """

#----------------------------------------------------
#   singleCellNet
#----------------------------------------------------

rule train_singleCellNet:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/singleCellNet/singleCellNet_model.Rda"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/singleCellNet/singleCellNet.log"
  benchmark:
    config['output_dir'] + "/singleCellNet/singleCellNet_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/singleCellNet/train_singleCellNet.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_singleCellNet:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/singleCellNet/singleCellNet_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/singleCellNet/singleCellNet_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/singleCellNet/singleCellNet.log"
  benchmark:
    config['output_dir'] + "/{sample}/singleCellNet/singleCellNet_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/singleCellNet/predict_singleCellNet.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   Correlation
#----------------------------------------------------

rule train_Correlation:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/Correlation/Correlation_model.Rda"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/Correlation/Correlation.log"
  benchmark:
    config['output_dir'] + "/Correlation/Correlation_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/Correlation/train_Correlation.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_Correlation:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/Correlation/Correlation_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/Correlation/Correlation_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/Correlation/Correlation.log"
  benchmark:
    config['output_dir'] + "/{sample}/Correlation/Correlation_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/Correlation/predict_Correlation.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scLearn 
#----------------------------------------------------

rule train_scLearn: 
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/scLearn/scLearn_model.Rda"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/scLearn/scLearn.log"
  benchmark:
    config['output_dir'] + "/scLearn/scLearn_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scLearn/train_scLearn.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_scLearn:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/scLearn/scLearn_model.Rda"
  output:
    pred = config['output_dir'] + "/{sample}/scLearn/scLearn_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/scLearn/scLearn.log"
  benchmark:
    config['output_dir'] + "/{sample}/scLearn/scLearn_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scLearn/predict_scLearn.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   ACTINN
#----------------------------------------------------

rule train_ACTINN:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations']
  output:
    model = config['output_dir'] + "/ACTINN/ACTINN_model.pkl"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/ACTINN/ACTINN.log"
  benchmark:
    config['output_dir'] + "/ACTINN/ACTINN_predict_benchmark.txt"
  shell:
    """
    python {params.basedir}/Scripts/ACTINN/train_ACTINN.py \
           -trs {input.reference} \
           -trl {input.labfile} \
	         -mp {output.model} \
    &> {log}
    """

rule predict_ACTINN:
  input:
    query = config['output_dir'] + "/{sample}/expression.csv",
    model = config['output_dir'] + "/ACTINN/ACTINN_model.pkl"
  output:
    pred = config['output_dir'] + "/{sample}/ACTINN/ACTINN_pred.csv"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/ACTINN/ACTINN.log"
  benchmark:
    config['output_dir'] + "/{sample}/ACTINN/ACTINN_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/ACTINN/predict_ACTINN.py \
           -ts {input.query} \
           -mp {input.model} \
           -pp {output.pred} \
    &> {log}
    
    """

#----------------------------------------------------
#   scID 
#----------------------------------------------------

rule run_scID:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations'],
    query = config['output_dir'] + "/{sample}/expression.csv"
  output:
    pred = config['output_dir'] + "/{sample}/scID/scID_pred.csv"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/{sample}/scID/scID.log"
  benchmark:
    config['output_dir'] + "/{sample}/scID/scID_predict_benchmark.txt"
  shell:
    """
    Rscript {params.basedir}/Scripts/scID/run_scID.R \
            {input.reference} \
	    {input.labfile} \
	    {input.query} \
	    {output.pred} \
	    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scAnnotate
#----------------------------------------------------

rule run_scAnnotate:
  input:
    reference = config['output_dir'] + "/expression.csv",
    labfile = config['reference_annotations'],
    query = config['output_dir'] + "/{sample}/expression.csv"
  output:
    pred = config['output_dir'] + "/{sample}/scAnnotate/scAnnotate_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0.5
  log:
    config['output_dir'] + "/{sample}/scAnnotate/scAnnotate.log"
  benchmark:
    config['output_dir'] + "/{sample}/scAnnotate/scAnnotate_predict_benchmark.txt"
  shell:
    """
    Rscript {params.basedir}/Scripts/scAnnotate/run_scAnnotate.R \
            {input.reference} \
            {input.labfile} \
            {input.query} \
            {output.pred} \
            {threads} \
	    {params.threshold} \
    &> {log}
    """

#----------------------------------------------------
#   The End 
#----------------------------------------------------
