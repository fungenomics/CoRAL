# import libraries
import os
from datetime import datetime

n_folds = list(range(1, config['benchmark']['n_folds']+1)) 

now = datetime.now()
dt_string = now.strftime("%Y-%m-%d_%H-%M-%S")

"""
One rule that directs the DAG which is represented in the rulegraph
"""
rule all:
  input: report_path = config['output_dir'] + '/report/' + dt_string + '.benchmark_report.html'

#----------------------------------------------------
#  Subset Folds 
#----------------------------------------------------

rule subset_folds:   
  input:
    reference = config['training_reference'],
    labfile = config['reference_annotations']
  output:
    training_data = expand(config['output_dir'] + "/fold{folds_index}/train.csv", folds_index = n_folds),
    labfile = expand(config['output_dir'] + "/fold{folds_index}/train_labels.csv", folds_index = n_folds),
    test_data = expand(config['output_dir'] + "/fold{folds_index}/test.csv", folds_index = n_folds)
  log:
    config['output_dir'] + "/subset_folds.log"
  params:
    basedir = {workflow.basedir},
    outdir = config['output_dir'],
    n_folds = config['benchmark']['n_folds']
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/benchmark/subset_folds.R \
    {input.reference} \
    {input.labfile} \
    {params.outdir} \
    {threads} \
    {params.n_folds} \
    &> {log}
    """

#----------------------------------------------------
#  Knit Report 
#----------------------------------------------------

rule knit_report:
  input: 
    pred = expand(config['output_dir'] + "/fold{folds_index}/{tool}/{tool}_pred.csv", 
                  folds_index = n_folds, 
                  tool = config['tools_to_run']),
    consensus = expand(config["output_dir"] + "/fold{folds_index}/Prediction_Summary.tsv",
                folds_index = n_folds)
  output: 
    report_path = config['output_dir'] + '/report/' + dt_string + '.benchmark_report.html'
  log:
    config['output_dir'] + "/report/report.log"
  params:
    basedir = {workflow.basedir},
    pred_path = config['output_dir'], 
    n_folds = config['benchmark']['n_folds'],
    tools = config['tools_to_run']
  threads: 1
  resources:
  shell:
    """
    Rscript -e "rmarkdown::render(
            '{params.basedir}/Notebooks/benchmark_report.Rmd',
            params = list(tools = '{params.tools}',
                          ref_name = '',
                          pred_path = '{params.pred_path}',
                          fold = '{params.n_folds}'),
            output_file = '{output.report_path}')" \
    &> {log}
    """

#----------------------------------------------------
#  Consensus
#----------------------------------------------------

rule consensus:
  input:
    results = expand(config["output_dir"] + "/fold{{folds_index}}/{tool}/{tool}_pred.csv",
                     tool=config['tools_to_run']),
    sample = config["output_dir"] + "/fold{folds_index}"
  output:
    prediction_summary = config["output_dir"] + "/fold{folds_index}/Prediction_Summary.tsv"
  log:
    config["output_dir"] + "/fold{folds_index}/Gatherpreds.log"
  params:
    basedir = {workflow.basedir},
    tools = config['tools_to_run'],
    conesnsus_tools = config['consensus_tools'],
    labfile = config['reference_annotations']
  shell:
    """
    Rscript {params.basedir}/Scripts/calculate_consensus.R \
    {input.sample} \
    {output.prediction_summary} \
    "{params.tools}" \
    "{params.conesnsus_tools}" \
    {params.labfile} \
    &> {log}
    """

#----------------------------------------------------
#   scPred 
#----------------------------------------------------

rule train_scPred:
  input:
    reference = config['output_dir'] + "/fold{fold}/train.csv",
    labfile = config['output_dir'] + "/fold{fold}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{fold}/scPred/scPred_model.Rda"
  params:
    basedir = {workflow.basedir},
    scPred_model = "svmRadial"
  log:
    config['output_dir'] + "/fold{fold}/scPred/scPred.log"
  benchmark:
    config['output_dir'] + "/fold{fold}/scPred/scPred_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scPred/train_scPred.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    {params.scPred_model} \
    &> {log}
    """

rule predict_scPred:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/scPred/scPred_model.Rda" 
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scPred/scPred_pred.csv" 
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/scPred/scPred.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scPred/scPred_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scPred/predict_scPred.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   SingelR 
#----------------------------------------------------

rule train_SingleR:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/SingleR/SingleR_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/fold{folds_index}/SingleR/SingleR.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SingleR/SingleR_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/SingleR/train_SingleR.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_SingleR:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/SingleR/SingleR_model.Rda" 
  output:
    pred = config['output_dir'] + "/fold{folds_index}/SingleR/SingleR_pred.csv" 
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/SingleR/SingleR.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SingleR/SingleR_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/SingleR/predict_SingleR.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scClassify
#----------------------------------------------------

rule train_scClassify:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/scClassify/scClassify_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/fold{folds_index}/scClassify/scClassify.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scClassify/scClassify_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scClassify/train_scClassify.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_scClassify:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/scClassify/scClassify_model.Rda" 
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scClassify/scClassify_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/scClassify/scClassify.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scClassify/scClassify_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scClassify/predict_scClassify.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   SciBet
#----------------------------------------------------

rule train_SciBet:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/SciBet/SciBet_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/fold{folds_index}/SciBet/SciBet.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SciBet/SciBet_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/SciBet/train_SciBet.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_SciBet:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/SciBet/SciBet_model.Rda" 
  output:
    pred = config['output_dir'] + "/fold{folds_index}/SciBet/SciBet_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/SciBet/SciBet.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SciBet/SciBet_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/SciBet/predict_SciBet.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   SVM Linear
#----------------------------------------------------

rule train_SVMlinear:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear_model.Rda"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/train_linearSVM.py \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_SVMlinear:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear_model.Rda"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0.5,
    tool_name = 'SVMlinear'
  log:
    config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SVMlinear/SVMlinear_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/predict_SVM.py \
    {input.query} \
    {input.model} \
    {output.pred} \
    {params.threshold} \
    {threads} \
    {params.tool_name} \
    &> {log}
    """

#----------------------------------------------------
#   SVC 
#----------------------------------------------------

rule train_SVC:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/SVC/SVC_model.Rda"
  params:
    basedir = {workflow.basedir},
    classifier = 'rbf'
  log:
    config['output_dir'] + "/fold{folds_index}/SVC/SVC.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SVC/SVC_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/train_SVM.py \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {params.classifier} \
    {threads} \
    &> {log}
    """

rule predict_SVC:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/SVC/SVC_model.Rda"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/SVC/SVC_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0.5,
    tool_name = 'rbf'
  log:
    config['output_dir'] + "/fold{folds_index}/SVC/SVC.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/SVC/SVC_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/SVC/predict_SVM.py \
    {input.query} \
    {input.model} \
    {output.pred} \
    {params.threshold} \
    {threads} \
    {params.tool_name} \
    &> {log}
    """

#----------------------------------------------------
#   singleCellNet
#----------------------------------------------------

rule train_singleCellNet:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/singleCellNet/train_singleCellNet.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_singleCellNet:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet_model.Rda" 
  output:
    pred = config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/singleCellNet/singleCellNet_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/singleCellNet/predict_singleCellNet.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   Correlation 
#----------------------------------------------------

rule train_Correlation:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/Correlation/Correlation_model.Rda"
  params:
    basedir = {workflow.basedir},
  log:
    config['output_dir'] + "/fold{folds_index}/Correlation/Correlation.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/Correlation/Correlation_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/Correlation/train_Correlation.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """
rule predict_Correlation:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/Correlation/Correlation_model.Rda"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/Correlation/Correlation_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/Correlation/Correlation.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/Correlation/Correlation_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/Correlation/predict_Correlation.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scLearn 
#----------------------------------------------------

rule train_scLearn: 
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/scLearn/scLearn_model.Rda"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/scLearn/scLearn.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scLearn/scLearn_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scLearn/train_scLearn.R \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {threads} \
    &> {log}
    """

rule predict_scLearn:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/scLearn/scLearn_model.Rda"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scLearn/scLearn_pred.csv"
  params:
      basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/scLearn/scLearn.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scLearn/scLearn_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    Rscript {params.basedir}/Scripts/scLearn/predict_scLearn.R \
    {input.query} \
    {input.model} \
    {output.pred} \
    {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scHPL
#----------------------------------------------------

rule train_scHPL:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/scHPL/scHPL_model.Rda"
  params:
    basedir = {workflow.basedir},
    classifier = 'svm',
    dimred = 'False'
  log:
    config['output_dir'] + "/fold{folds_index}/scHPL/scHPL.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scHPL/scHPL_train_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/scHPL/train_scHPL.py \
    {input.reference} \
    {input.labfile} \
    {output.model} \
    {params.classifier} \
    {params.dimred} \
    &> {log}
    """

rule predict_scHPL:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/scHPL/scHPL_model.Rda"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scHPL/scHPL_pred.csv"
  params:
      basedir = {workflow.basedir},
      threshold = 0.5
  log:
    config['output_dir'] + "/fold{folds_index}/scHPL/scHPL.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scHPL/scHPL_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/scHPL/predict_scHPL.py \
    {input.query} \
    {input.model} \
    {output.pred} \
    {params.threshold} \
    &> {log}
    """

#----------------------------------------------------
#   ACTINN
#----------------------------------------------------

rule train_ACTINN:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv"
  output:
    model = config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN_model.pkl"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN_predict_benchmark.txt"
  shell:
    """
    python {params.basedir}/Scripts/ACTINN/train_ACTINN.py \
           -trs {input.reference} \
           -trl {input.labfile} \
                 -mp {output.model} \
    &> {log}
    """

rule predict_ACTINN:
  input:
    query = config['output_dir'] + "/fold{folds_index}/test.csv",
    model = config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN_model.pkl"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN_pred.csv"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/ACTINN/ACTINN_predict_benchmark.txt"
  threads: 1
  resources:
  shell:
    """
    python {params.basedir}/Scripts/ACTINN/predict_ACTINN.py \
           -ts {input.query} \
           -mp {input.model} \
           -pp {output.pred} \
    &> {log}

    """

#----------------------------------------------------
#   scID
#----------------------------------------------------

rule run_scID:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv",
    query = config['output_dir'] + "/fold{folds_index}/test.csv"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scID/scID_pred.csv"
  params:
    basedir = {workflow.basedir}
  log:
    config['output_dir'] + "/fold{folds_index}/scID/scID.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scID/scID_predict_benchmark.txt"
  shell:
    """
    Rscript {params.basedir}/Scripts/scID/run_scID.R \
            {input.reference} \
            {input.labfile} \
            {input.query} \
            {output.pred} \
            {threads} \
    &> {log}
    """

#----------------------------------------------------
#   scAnnotate
#----------------------------------------------------

rule run_scAnnotate:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv",
    query = config['output_dir'] + "/fold{folds_index}/test.csv"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scAnnotate/scAnnotate_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0.5
  log:
    config['output_dir'] + "/fold{folds_index}/scAnnotate/scAnnotate.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scAnnotate/scAnnotate_predict_benchmark.txt"
  shell:
    """
    Rscript {params.basedir}/Scripts/scAnnotate/run_scAnnotate.R \
            {input.reference} \
            {input.labfile} \
            {input.query} \
            {output.pred} \
            {threads} \
            {params.threshold} \
    &> {log}
    """

#----------------------------------------------------
#   scNym
#----------------------------------------------------

rule run_scNym:
  input:
    reference = config['output_dir'] + "/fold{folds_index}/train.csv",
    labfile = config['output_dir'] + "/fold{folds_index}/train_labels.csv",
    query = config['output_dir'] + "/fold{folds_index}/test.csv"
  output:
    pred = config['output_dir'] + "/fold{folds_index}/scNym/scNym_pred.csv"
  params:
    basedir = {workflow.basedir},
    threshold = 0.5
  log:
    config['output_dir'] + "/fold{folds_index}/scNym/scNym.log"
  benchmark:
    config['output_dir'] + "/fold{folds_index}/scNym/scNym_predict_benchmark.txt"
  shell:
    """
    python {params.basedir}/Scripts/scNym/run_scNym.py \
            {input.reference} \
            {input.labfile} \
            {input.query} \
            {output.pred} \
            {params.threshold} \
    &> {log}
    """

#----------------------------------------------------
#   The End 
#----------------------------------------------------
